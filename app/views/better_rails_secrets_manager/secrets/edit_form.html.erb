<div class="bg-white rounded-lg card-shadow p-6">
  <div class="flex justify-between items-center mb-6">
    <% 
      display_env = case current_environment
      when 'credentials'
        'Main Credentials'
      else
        current_environment.humanize.capitalize + ' Secrets'
      end
    %>
    <h2 class="text-2xl font-bold">Edit <%= display_env %></h2>
    <div class="space-x-2">
      <%= link_to "← Back", root_path, class: "link-primary" %>
      <%= link_to "Switch to YAML Editor", edit_path(mode: 'yaml'), class: "link-secondary text-sm" %>
    </div>
  </div>

  <%= form_with url: update_path, local: true, id: 'secrets-form', html: { 'data-turbo': false } do |f| %>
    <div id="secrets-container" class="space-y-6">
      <% if @current_secrets.blank? %>
        <div class="text-center py-8 text-gray-500">
          <p>No secrets configured yet. Start by adding your first secret or section.</p>
        </div>
      <% else %>
        <% @current_secrets.each do |key, value| %>
          <% if value.is_a?(Hash) %>
            <!-- Section with nested values -->
            <div class="section-container border-l-4 border-indigo-500 pl-4" data-section="<%= key %>">
              <div class="flex items-center justify-between mb-3">
                <h3 class="text-lg font-semibold text-gray-700"><%= key.to_s.humanize %></h3>
                <button type="button" class="remove-section btn-icon btn-icon-danger" title="Remove section">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                  </svg>
                </button>
              </div>
              <div class="section-fields space-y-2 ml-4">
                <% value.each do |nested_key, nested_value| %>
                  <div class="field-row flex items-center space-x-2">
                    <input type="text" 
                           name="secrets[<%= key %>][keys][]" 
                           value="<%= nested_key %>"
                           placeholder="Key"
                           class="flex-1 ">
                    <input type="text" 
                           name="secrets[<%= key %>][values][]" 
                           value="<%= nested_value %>"
                           placeholder="Value"
                           class="flex-1 ">
                    <button type="button" class="remove-field btn-icon btn-icon-danger">
                      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                      </svg>
                    </button>
                  </div>
                <% end %>
                <button type="button" class="add-field-to-section btn-add">
                  + Add field to <%= key %>
                </button>
              </div>
            </div>
          <% else %>
            <!-- Simple key-value pair -->
            <div class="field-row flex items-center space-x-2">
              <input type="text" 
                     name="secrets[root][keys][]" 
                     value="<%= key %>"
                     placeholder="Key"
                     class="flex-1 ">
              <input type="text" 
                     name="secrets[root][values][]" 
                     value="<%= value %>"
                     placeholder="Value"
                     class="flex-1 ">
              <button type="button" class="remove-field btn-icon btn-icon-danger">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
          <% end %>
        <% end %>
      <% end %>
    </div>

    <!-- Add new field/section buttons -->
    <div class="mt-6 pt-6 border-t flex space-x-4">
      <button type="button" id="add-field" class="btn-secondary">
        + Add Field
      </button>
      <button type="button" id="add-section" class="btn-secondary">
        + Add Section
      </button>
    </div>

    <!-- Form actions -->
    <div class="mt-6 flex space-x-4">
      <%= f.submit "Save Secrets", class: "btn-success" %>
      <%= link_to "Cancel", root_path, class: "btn-secondary" %>
    </div>
  <% end %>
</div>

<!-- Templates for dynamic fields -->
<template id="field-template">
  <div class="field-row flex items-center space-x-2">
    <input type="text" 
           name="secrets[root][keys][]" 
           placeholder="Key"
           class="flex-1 ">
    <input type="text" 
           name="secrets[root][values][]" 
           placeholder="Value"
           class="flex-1 ">
    <button type="button" class="remove-field btn-icon btn-icon-danger">
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
  </div>
</template>

<template id="section-template">
  <div class="section-container border-l-4 border-indigo-500 pl-4" data-section="">
    <div class="flex items-center justify-between mb-3">
      <input type="text" 
             placeholder="Section name" 
             class="section-name text-lg font-semibold bg-transparent border-b border-gray-300 focus:border-indigo-500 focus:outline-none">
      <button type="button" class="remove-section btn-icon btn-icon-danger" title="Remove section">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
        </svg>
      </button>
    </div>
    <div class="section-fields space-y-2 ml-4">
      <button type="button" class="add-field-to-section btn-add">
        + Add field to this section
      </button>
    </div>
  </div>
</template>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const container = document.getElementById('secrets-container');
  
  // Add new root field
  document.getElementById('add-field').addEventListener('click', function() {
    const template = document.getElementById('field-template');
    const clone = template.content.cloneNode(true);
    container.appendChild(clone);
    attachFieldListeners();
  });
  
  // Add new section
  document.getElementById('add-section').addEventListener('click', function() {
    const sectionName = prompt('Enter section name:');
    if (!sectionName) return;
    
    const template = document.getElementById('section-template');
    const clone = template.content.cloneNode(true);
    
    const sectionDiv = clone.querySelector('.section-container');
    sectionDiv.dataset.section = sectionName;
    
    const nameInput = clone.querySelector('.section-name');
    nameInput.value = sectionName;
    nameInput.readOnly = true;
    
    container.appendChild(clone);
    attachSectionListeners();
  });
  
  // Remove field
  function attachFieldListeners() {
    document.querySelectorAll('.remove-field').forEach(button => {
      button.removeEventListener('click', removeField);
      button.addEventListener('click', removeField);
    });
  }
  
  function removeField(e) {
    e.target.closest('.field-row').remove();
  }
  
  // Remove section
  function attachSectionListeners() {
    document.querySelectorAll('.remove-section').forEach(button => {
      button.removeEventListener('click', removeSection);
      button.addEventListener('click', removeSection);
    });
    
    document.querySelectorAll('.add-field-to-section').forEach(button => {
      button.removeEventListener('click', addFieldToSection);
      button.addEventListener('click', addFieldToSection);
    });
  }
  
  function removeSection(e) {
    if (confirm('Remove this entire section?')) {
      e.target.closest('.section-container').remove();
    }
  }
  
  function addFieldToSection(e) {
    const section = e.target.closest('.section-container');
    const sectionName = section.dataset.section;
    const fieldsContainer = section.querySelector('.section-fields');
    
    const fieldRow = document.createElement('div');
    fieldRow.className = 'field-row flex items-center space-x-2';
    fieldRow.innerHTML = `
      <input type="text" 
             name="secrets[${sectionName}][keys][]" 
             placeholder="Key"
             class="flex-1 ">
      <input type="text" 
             name="secrets[${sectionName}][values][]" 
             placeholder="Value"
             class="flex-1 ">
      <button type="button" class="remove-field btn-icon btn-icon-danger">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    `;
    
    fieldsContainer.insertBefore(fieldRow, e.target);
    attachFieldListeners();
  }
  
  // Initial attachment
  attachFieldListeners();
  attachSectionListeners();
  
  // Form submission - convert to proper structure
  document.getElementById('secrets-form').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const secrets = {};
    
    // Process root fields
    const rootKeys = formData.getAll('secrets[root][keys][]');
    const rootValues = formData.getAll('secrets[root][values][]');
    rootKeys.forEach((key, index) => {
      if (key) secrets[key] = rootValues[index] || '';
    });
    
    // Process sections
    document.querySelectorAll('.section-container').forEach(section => {
      const sectionName = section.dataset.section;
      if (!sectionName) return;
      
      const sectionKeys = formData.getAll(`secrets[${sectionName}][keys][]`);
      const sectionValues = formData.getAll(`secrets[${sectionName}][values][]`);
      
      if (sectionKeys.length > 0) {
        secrets[sectionName] = {};
        sectionKeys.forEach((key, index) => {
          if (key) secrets[sectionName][key] = sectionValues[index] || '';
        });
      }
    });
    
    // Create a hidden field with the JSON data
    const hiddenField = document.createElement('input');
    hiddenField.type = 'hidden';
    hiddenField.name = 'secrets_json';
    hiddenField.value = JSON.stringify(secrets);
    this.appendChild(hiddenField);
    
    // Submit the form
    this.submit();
  });
});
</script>